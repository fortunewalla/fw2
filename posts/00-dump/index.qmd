---
title: "dump"
#author: "Fortune Walla"
date: "2013-03-18"
date-modified: "2013-03-18"
categories: [misc,000,z]
#image: "image.jpg"
#draft: true
---

_This page is to quickly dump material to be sorted properly into articles later._

02NOV2024

[Apply for permissions to unlock Mi devices](https://en.miui.com/unlock/download_en.html)

[How to Install Fastboot Drivers in Windows 11 - Droidwin](https://droidwin.com/how-to-install-fastboot-drivers-in-windows-11/)

[Download Latest Android SDK Platform Tools [Windows/Mac/Linux] {Video}](https://droidwin.com/download-latest-android-sdk-platform-tools-windows-mac-linux/)

[How to Unlock Bootloader on any Xiaomi/Poco/Redmi/Mi Device](https://droidwin.com/unlock-bootloader-xiaomi/)


[Title](https://dl.google.com/android/repository/platform-tools-latest-windows.zip)

[How to Install Fastboot ROM via Mi Flash Tool on Xiaomi/Redmi/Poco - YouTube](https://www.youtube.com/watch?v=vJ2NEpDezwE)

[Title](https://miuirom.xiaomi.com/rom/u1106245679/6.5.224.28/miflash_unlock-en-6.5.224.28.zip)


```
C:\sw\platform-tools>adb devices
List of devices attached


C:\sw\platform-tools>fastboot devices
83995874         fastboot

C:\sw\platform-tools>fastboot oem device-info
(bootloader) Verity mode: true
(bootloader) Device unlocked: true
(bootloader) Device critical unlocked: true
(bootloader) Charger screen enabled: false
OKAY [  0.008s]
Finished. Total time: 0.011s

C:\sw\platform-tools>fastboot getvar anti
anti: 3
Finished. Total time: 0.001s

```


23OCT2024

### Cudatext add-ons

#### Markdown Special Paste

```ini
[events]
cuda_project_man=on_start

[markdown_special_paste]
url_timeout=5
pic_path={filedir}/media
pic_name={now}.png
now=%Y-%m-%d-%H-%M-%S
```


```
plugin for CudaText.
it handles "on_paste" event for lexers:
- Markdown
- reStructuredText
- MediaWiki
- AsciiDoc
- LaTeX

1) if clipboard contains text URL: 'http://' or 'https://'.
plugin changes text according to templates:

- for Markdown: [Text](url)
- for reStructuredText: `Text <url>`__
- for MediaWiki: [url Text]
- for AsciiDoc: url[title]
- for LaTeX: \href{url}{title}

2) if clipboard contains a picture.
plugin suggests to save the picture in the folder of the current file
(or the folder of the current Project Manager project, by option).
after that it inserts the link to this new file.

- for Markdown: '![alt text](filename.png "Title")
- for reStructuredText: .. image:: filename.png
- for MediaWiki: [[File:filename.png]]
- for AsciiDoc: image:filename.png[title="Title"]
- for LaTeX: \includegraphics[width=\linewidth]{filename.png}


how to temporary skip plugin work
---------------------------------

to skip plugin handling, call the Paste command with any hotkey
containing Shift, or call menu item Paste while holding Shift.
e.g. use Shift+Insert (standard second hotkey for Paste).
or use Ctrl+Shift+V, but first you need to assign Ctrl+Shift+V to "Paste"
(in the Command Palette dialog).


options
-------

config file "plugins.ini" can be opened via menu item:
  "Options / Settings-plugins / Markdown Special Paste / Config".

options in section [markdown_special_paste] are:

- "url_timeout" - Timeout in seconds, which it used on downloading webpage by its URL.
- "pic_name" - Initial suggested name for picture file.
    Can have macros:
    {now} - Current date/time formatted as yyyy-mm-dd-hh-mm-ss.
- "pic_path" - Initial folder for picture file, when pasting picture.
    Can contain subfolders with separator "/", they will be auto-created.
    Option value must begin with one of macros:
    {filedir} - Folder of current editor file.
    {projdir} - Folder of currently opened CudaText project.
                If no project is opened, it's folder of current editor file.
- "now" - Date/time format for {now} macro. See Python docs for strftime().


author: Alexey Torgashin
license: MIT

```


Times Series

https://news.ycombinator.com/item?id=37874891


Queuing Theory:

https://news.ycombinator.com/item?id=37532439

https://www.oreilly.com/library/view/feedback-control-for/9781449362638/


Tackling the Curse of Dimensionality with Physics-Informed Neural Networks

https://arxiv.org/abs/2307.12306

How to be a consultant:

https://jacquesmattheij.com/be-consultant/

https://guzey.com/2022-lessons/

https://guzey.com/

https://guzey.com/science/sleep/14-day-sleep-deprivation-self-experiment/

https://marginalrevolution.com/books

https://nabeelqu.substack.com/p/advice

Notes on Puzzles

https://news.ycombinator.com/item?id=36757492

https://nabeelqu.substack.com/p/notes-on-puzzles

Problem-Solving Through Problems (BOOK)

https://guzey.com/advice-from-tyler-cowen/

Here’s the advice I’ve seen Tyler Cowen (aka Oracle of DelCi) give to people that I keep pondering over the years.

    You can always do better.
    Don’t do a big project if the conversations you have w/ your future colleagues are not the most exciting ones you have
    Prepare to live in times of change.
    What great people work on is overdetermined because it’s clear what the greatest thing to do is at any point in history.
    Always keep improving your mentors and always keep asking yourself who are the young people you want to be talking to.
    Recursive self-improvement requires a closed system.
    Find a partner.

https://marginalrevolution.com/marginalrevolution/2023/07/alexey-summarizes-the-advice-he-hears-me-give-people.html

### Ask HN: What books or courses do you know similar to "From Nand to Tetris"?

https://news.ycombinator.com/item?id=36853931

### Advanced Python Mastery (github.com/dabeaz-course) https://news.ycombinator.com/item?id=36785005

### Python Cheatsheet (gto76.github.io) https://news.ycombinator.com/item?id=36806753

### The open source learning curve for AI researchers (supervised.news) https://news.ycombinator.com/item?id=36793881

### A command-line murder mystery (2014) (github.com/veltman) https://news.ycombinator.com/item?id=36868978

### A command-line murder mystery sql version: https://github.com/NUKnightLab/sql-mysteries


### Book: Hacks, Leaks https://hacksandleaks.com/introduction.html

### CentOS 9 stream boot ISO

https://mirrors.centos.org/mirrorlist?path=/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-boot.iso&redirect=1&protocol=https

https://epel.mirror.net.in/centos-stream/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-boot.iso

https://ftp.riken.jp/Linux/centos-stream/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-boot.iso

https://centos.is/centos-stream/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-boot.iso

### KNIME Early Access v5

<https://www.knime.com/download-early-access-KNIME-AP-V5>

<https://www.knime.com/downloads/download-knime>

### Modern image processing in C

https://sod.pixlab.io/articles/modern-image-processing-algorithms-implementation.html

ggml.ai 

### Free for Life

https://github.com/free-for-life/free-for-life#domains

### Javascript

https://freesoff.com/tag/javascript

https://www.freecoursesonline.me/?10


### <brainflow.org>

So for Android, only Java based. No Kotlin support as yet.

Also no support for smartwatches as yet. So keeping this project in pause to see new developments including Javascript support.

### physics



Shilov linear algebra, kostrikin manin linear algebra and geometry

Like Sternberg Advanced Calculus, Apostol Calculus, Shilov a course in analysis

Sternberg does good classical mechanics, exterior calculus, apostol emphasizes basic calculus computations, shilov with measure theory and QM

it starts with Landau's courses, then Sternberg, Arnol'd, 

there are many others
Alan Weinstein, Mardsen on symplectic geometry and quantization
Hermann on gauge and control theory
Weinberg on QFT

I would recommend reading linear algebra, first of all, to change that
but the book by Byron and Fuller is reasonable

well look at the contents of shilov or kostrikin-manin to be sure

at least at a basic level
Landau's 10 volumes cover every area of physics
any they are some of the best books ever written, period

axler isn't a linear algebra book
it has some elements of linear spaces, but despite the disguise, it does more iterated dynamics than linear algebra
JuryNullification
 — 
03/02/2023 12:56 AM
interesting
ker(∂n)/im(∂n-1)≅πn(X), n≤dim(X)
 — 
03/02/2023 12:56 AM
and determinants are at the end, etc
it misses a bunch of major lin alg topics too
it's not a bad book by any means
adamnemecek
 — 
03/02/2023 12:56 AM
what does it miss
ker(∂n)/im(∂n-1)≅πn(X), n≤dim(X)
 — 
03/02/2023 12:57 AM
it does very little with determinants as I've mentioned, it does hardly anything with tensors, quadratic forms, representations, geometry
which are all useful to computations, ML, physics


structure coefficients are numbers appearing in linear combinations, whenever you choose a basis of an algebra or coalgebra
so you will see them everywhere


any book on lie groups and lie algebras will have them
representation theory too
I like Olver's applications of lie groups to differential equations
he does a lot of structure coefficient computations coming from symmetries of DEs
ker(∂n)/im(∂n-1)≅πn(X), n≤dim(X)
 — 
03/02/2023 1:28 AM
they are simple things, just coefficients of linear combinations
much like the components of a matrix are to linear transformations


structure coefficients are exactly the same thing between algebras and coalgebras

https://en.wikipedia.org/wiki/Structure_constants#Hopf_algebras

you guys should read about lie groups and lie algebras

lie groups are parametrized families of linear transformations, such as rotations, hyperbolic transformations, etc
lie algebras contain the velocities/derivatives of these transformations
it is very useful because unlike finite symmetry transformations, you can use calculus
mathematicians classified all of the basic kinds of such symmetries a while ago
one of the most basic examples of hopf algebras is the enveloping algebra of any lie algebra
it's what created the field


Brian hall is accessible from linear algebra, but doesn't connect it to much
adamnemecek
 — 
03/02/2023 1:51 AM
harris?
ker(∂n)/im(∂n-1)≅πn(X), n≤dim(X)
 — 
03/02/2023 1:51 AM
there are different aspects, Harris is one important one yeah
Olver is another, since Lie groups were invented in that context (and you study local rather than global lie groups) 



the trig angle sum formulae are comultiplication per the first page of sternberg quantum groups

do you (or anyone)  happen to know the relationship between hopf algebra and riemann geometry? Ideally you would know classical mechanics, Quantum mechanics, spectral geometry and then I could try 


https://arxiv.org/pdf/1906.02762.pdf


https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.64.2837

https://www.nature.com/articles/s41467-021-27590-0


https://projecteuclid.org/journals/bulletin-of-the-american-mathematical-society-new-series/volume-73/issue-6/Differentiable-dynamical-systems/bams/1183529092.full


https://arxiv.org/abs/1902.08666

also you know steven strogaz's lecture course on youtube right?

https://arxiv.org/abs/2006.15136

https://theses.hal.science/tel-01218015/document

https://cats.for.ai/

https://trane-project.github.io/

https://arxiv.org/abs/2212.14374



whycanisearchhinges
 — 
03/06/2023 3:02 AM
Stiefel manifolds are great 😃
I am learning about using them for optimization
Makes eigenvalue and svd easier


https://www.youtube.com/watch?v=VqiTtdY58Ts&list=PLSrTvUm384I9PV10koj_cqit9OfbJXEkq&index=4


https://arxiv.org/abs/2211.01364

https://arxiv.org/abs/1609.05382


https://arxiv.org/abs/2208.08609

https://jalammar.github.io/illustrated-transformer/


https://arxiv.org/pdf/2302.01834.pdf


https://lilianweng.github.io/posts/2020-04-07-the-transformer-family/


https://github.com/BlinkDL/RWKV-LM

https://en.wikipedia.org/wiki/Categorical_trace

https://arxiv.org/abs/2302.01834


https://arxiv.org/abs/1206.3620

read the bartosz milewski book
programmer? ct for programmers. Mostly exposed to Toby for active inference, Jules because he's so nice and optics/games and whatnot. And math3ma and Baez because they try so hard to make it accessible

But I know I should just go through that purely visual intro by spivak I think for the conceptual and terminology

Bartosz is very based and cool

he didn't understand that qft is not quite useful for ml
i was like ML has two building blocks: autodiff and tensors
hopf leaning tries to unify those into one
what is the block in qft (i knew there wasn't one)
he responded "there isn't one, you are asking the wrong question"
i was like dude....what would be the building block then 
you dont get it
i asked him to show me a cool qft project on github or wherever
there isn't one


https://arxiv.org/abs/2302.01834


came across this book which might be of interest to people
http://library.lol/main/392B0FC6CBD018357DD0AB313B315C90
this it's a good book yall

also hopf fibration and hopf algbera are different

hopf fibration and algebra are by the same person
hopf bifucation is by a different guy


https://press.princeton.edu/books/hardcover/9780691132983/optimization-algorithms-on-matrix-manifolds


https://www.beren.io/2023-01-21-gradient-hacking-extremely-difficult/

https://transformer-circuits.pub/2022/toy_model/index.html

Ahh this brings back memories, I loved the green Kauffman book back in the day:

https://arxiv.org/abs/2204.12104

Polynomial Functors:
A General Theory of Interaction https://topos.site/poly-book.pdf


https://proceedings.neurips.cc/paper/2018/file/033cc385728c51d97360020ed57776f0-Paper.pdf

I had seen some of the work from DJ Myers on dynamical systems, and then Spivak's Poly that, as I understand it, is in the same vein.


https://arxiv.org/abs/2303.04488

https://blogs.ams.org/mathgradblog/2012/12/23/howdoyoueatyourcorn/#:~:text=One%20way%20was%20to%20munch%20over%20the%20length,eating%20in%20spirals%2C%20and%20the%20algebraists%20in%20rows

Clearly some of this "beauty" is subjective since mathematicians have different aesthetic preferences. However, there seems to be at least some objectivity:

- An overwhelming majority of mathematicians would find the following theorem uninteresting: <a fixed-and-otherwise-unremarkable boolean circuit> is unsatisfiable.
- Most mathematicians find Fermat's Last Theorem at least somewhat interesting.

Plus, people's interests in math subjects seem (anecdotally to me) to form clusters:

- Combinatorics and computer science are "close", in a sense that mathematicians who like combinatorics are more likely to like computer science
- Analysis and algebra are "distant", in that mathematicians who like the algebra-clustered subjects often dislike the analysis-clustered subjects
- Areas like combinatorics, logic and (higher) category theory seem to be quite polarizing -- more mathematicians have strong feelings about them, both negative and positive, compared to areas like stochastic calculus or algebraic topology.


https://press.princeton.edu/books/ebook/9780691218304/mathematics-and-plausible-reasoning-volume-1


https://arxiv.org/abs/2205.14217


"Familiarity with Gr ̈obner bases is assumed".  Shit.
adamnemecek
 — 
Yesterday at 1:54 AM
just read up onthem
they show up a lot
they are a big deal for some reason

https://arxiv.org/abs/1610.02357


https://f-droid.org/packages/io.github.muntashirakon.Music/

https://harmonoid.com/

https://github.com/digimezzo/dopamine

PowerAmp Android

https://laragon.org/download/

https://docs.lando.dev/getting-started/installation.html

https://geekrewind.com/how-to-login-as-root-on-ubuntu-with-windows-wsl/


streamlit.app

henning(Other)
zimcrom.github.io/2021-Oct-Portfolio/


https://resources.experfy.com/bigdata-cloud/mastering-the-data-science-interview-loop/




========================================================================================


===========================================================

Ashish Pratap SinghAshish Pratap Singh  • 2nd • 2nd SDE2 at Amazon | Ex - Adobe, Morgan Stanley | GSoC17 | BITSSDE2 at Amazon | Ex - Adobe, Morgan Stanley | GSoC17 | BITS 2d • 
 2d • 
I solved 150 Binary Tree Leetcode problems.

Here are my Top 25 (sorted by difficulty level):


1) Invert Binary Tree: https://lnkd.in/gPhkDPc9

2) Convert Sorted Array to Binary Search Tree: https://lnkd.in/gT7tm5fJ

3) Count Complete Tree Nodes: https://lnkd.in/gtbaK9HC

4) All Possible Full Binary Trees: https://lnkd.in/gzXK_J6w

5) Delete Leaves With a Given Value: https://lnkd.in/gQAynr5J

6) Binary Search Tree Iterator: https://lnkd.in/g8Y3X2xT

7) Longest Univalue Path: https://lnkd.in/gKFSfRM6

8) Delete Nodes And Return Forest: https://lnkd.in/g6Xx3uc7

9) Validate Binary Search Tree: https://lnkd.in/gB-pgNQB

10) Construct Binary Tree from Inorder and Postorder Traversal: https://lnkd.in/g4u6h4th

11) All Nodes Distance K in Binary Tree: https://lnkd.in/g7FTxcbJ

12) Maximum Difference Between Node and Ancestor: https://lnkd.in/gG2eK9eG

13) Find Duplicate Subtrees: https://lnkd.in/gWuU7PAM

14) Flatten Binary Tree to Linked List: https://lnkd.in/giQVJju6

15) House Robber III: https://lnkd.in/gFZAhbG9

16) Step-By-Step Directions From a Binary Tree Node to Another: https://lnkd.in/gFEqEbZQ

17) Delete Node in a BST: https://lnkd.in/ghyg5-pb

18) Populating Next Right Pointers in Each Node II: https://lnkd.in/g_NM2kcb

19) Trim a Binary Search Tree: https://lnkd.in/ggZjxhfB

20) Distribute Coins in Binary Tree: https://lnkd.in/gB5jwdYP

21) Binary Search Tree to Greater Sum Tree: https://lnkd.in/gvKbCMDE

22) Serialize and Deserialize Binary Tree: https://lnkd.in/gwUFkSd9

23) Binary Tree Cameras: https://lnkd.in/gNZaCAvY

24) Binary Tree Maximum Path Sum: https://lnkd.in/gsQNe33B

25) Maximum Sum BST in Binary Tree: https://lnkd.in/gdeQNKXy

These 25 helped me get familiar with multiple varieties of Binary Tree problems and I had fun while solving them.


=================================================================================================================


========================================================================================================================================================================================================================
Ashish Pratap Singh
Ashish Pratap SinghAshish Pratap Singh • 2nd • 2nd SDE2 at Amazon | Ex - Adobe, Morgan Stanley | GSoC17 | BITSSDE2 at Amazon | Ex - Adobe, Morgan Stanley | GSoC17 | BITS
40m •
40m •
I have cleared interviews at Adobe, Amazon, Google and Microsoft.

Here are the primary resources I used for all types of interviews:

𝐂𝐨𝐝𝐢𝐧𝐠 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:

𝘉𝘰𝘰𝘬𝘴:
- Data Structures and Algorithms Made Easy by Narasimha Karumanchi
- Cracking the Coding Interview by Gayle Laakmann McDowell

𝘊𝘰𝘶𝘳𝘴𝘦𝘴:
- Algorithms 1 and Algorithms 2 by Princeton University on Coursera (Skipped the Advance Sections)

𝘠𝘰𝘶𝘵𝘶𝘣𝘦 𝘤𝘩𝘢𝘯𝘯𝘦𝘭𝘴:
- William Fiset’s Data Structure Playlist
- Tushar Roy’s DP and Graph Playlist
- Abdul Bari Sir’s Algorithm Playlist

𝘗𝘳𝘢𝘤𝘵𝘪𝘤𝘪𝘯𝘨 𝘤𝘰𝘥𝘪𝘯𝘨 𝘱𝘳𝘰𝘣𝘭𝘦𝘮𝘴:
- LeetCode

***

𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:

𝘉𝘰𝘰𝘬𝘴:
- Designing Data Intensive Applications by Martin Klepmann

𝘊𝘰𝘶𝘳𝘴𝘦𝘴:
- Grokking the System Design Interview on Educative

𝘠𝘰𝘶𝘵𝘶𝘣𝘦 𝘤𝘩𝘢𝘯𝘯𝘦𝘭𝘴:
- TechDummies
- Tushar Roy’s System Design Playlist
- Codekarle
- Gaurav Sen

***

𝐋𝐨𝐰 𝐋𝐞𝐯𝐞𝐥 𝐃𝐞𝐬𝐢𝐠𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:

𝘉𝘰𝘰𝘬𝘴:
- Head First Design Patterns

𝘊𝘰𝘶𝘳𝘴𝘦𝘴:
- Grokking the Object Oriented Design Interview on Educative

***

𝐁𝐞𝐡𝐚𝐯𝐢𝐨𝐫𝐚𝐥 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:
- For this, I created a doc listing down the most commonly asked questions and wrote answers based on my work experience and projects following the STAR framework.

𝐌𝐨𝐜𝐤 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:
- Pramp: I used this few weeks before my interviews to practice in an interview setting.

𝐓𝐚𝐤𝐢𝐧𝐠 𝐍𝐨𝐭𝐞𝐬: 
- Notion: This is one of my favorite applications. I use this to take notes and organize information. You can get the basic plan for free if you have your college email id.

Most of these resources are freely available on the internet and enough to prepare for interviews.


===================================================================================================================


